#####################################################################
echo "-----------------------------------------------------"
echo " exgdas_nceppost.sh.sms" 
echo " Sep 07 - Chuang - Modified script to run unified post"
echo " July 14 - Carlis - Changed to 0.25 deg grib2 master file"
echo " Feb 16 - Lin - Modify to use Vertical Structure"
echo "-----------------------------------------------------"
#####################################################################

set -x

cd $DATA

msg="HAS BEGUN on `hostname`"
postmsg "$jlogfile" "$msg"

export POSTGPSH=${POSTGPSH:-$USHglobal/global_nceppost.sh}

############################################################
#  Define Variables:
#  -----------------
#  fhr          is the current forecast hour.
#  SLEEP_TIME   is the number of seconds to sleep before exiting with error.
#  SLEEP_INT    is the number of seconds to sleep between restrt file checks.
#  restart_file is the name of the file to key off of to kick off post.
############################################################

export IO=${LONB:-1440}
export JO=${LATB:-721}
############################################################
# Post Analysis Files before starting the Forecast Post
############################################################
# Chuang: modify to process analysis when post_times is 00
export stime=`echo $post_times | cut -c1-2`

if test -f $COMIN/${RUN}.t${cyc}z.sanl -a ${stime} = "00"
then
   
# add new environmental variables for running new ncep post
# Validation date

   export VDATE=${PDY}${cyc}
   
# set outtyp to 1 because we need to run chgres in the post before model start running chgres
# otherwise set to 0, then chgres will not be executed in global_nceppost.sh
    
   export OUTTYP=${OUTTYP:-3}
   
# specify output file name from chgres which is input file name to nceppost 
# if model already runs gfs io, make sure GFSOUT is linked to the gfsio file
# new imported variable for global_nceppost.sh

   export GFSOUT=${RUN}.${cycle}.gfsioanl

# specify smaller control file for GDAS because GDAS does not
# produce flux file, the default will be /nwprod/parm/gfs_cntrl.parm

   if [ $GRIBVERSION = 'grib1' ]; then
     export IGEN=$IGEN_ANL
     export CTLFILE=$PARMglobal/gfs_cntrl.parm_anl
     export ANOMCATSH=$USHglobal/global_anomcat.sh
   elif [ $GRIBVERSION = 'grib2' ]; then
     export POSTGRB2TBL=${POSTGRB2TBL:-/nwprod/lib/sorc/g2tmpl/params_grib2_tbl_new}
     export PostFlatFile=${PostFlatFile:-$PARMglobal/postxconfig-NT-GFS-ANL.txt} 
   fi

   if [[ $RUN = gfs ]] ; then
     sed <$CTLFILE1 -e "s#${IGEN_ANL}#${IGEN_ANL}#" > ./ctlfile_anl
     export CTLFILE=./ctlfile_anl
   fi
   
   rm sigfile sfcfile
   cp $COMIN/${RUN}.t${cyc}z.sanl sigfile
   cp $COMIN/${RUN}.t${cyc}z.sfcanl sfcfile

   export SIGINP=sigfile
   export SFCINPUT=sfcfile
   export PGBOUT=pgbfile
   export PGIOUT=pgifile
   export PGBOUT2=pgbfile.grib2
   export PGIOUT2=pgifile.grib2.idx
   export IGEN=$IGEN_ANL
   export FILTER=1  

 #specify fhr even for analysis because postgp uses it    
#   export fhr=00
    
   $POSTGPSH

   if test $GRIBVERSION = 'grib2'
   then
     mv $PGBOUT $PGBOUT2
     ################## Add pgrb convertion here######### WANG ##############
     export paramlist=${paramlist:-$PARMglobal/global_1x1_paramlist_g2.anl}
     $WGRIB2 $PGBOUT2 | grep -F -f $paramlist | $WGRIB2 -i -grib  tmpfile_anl $PGBOUT2
    export grid1p0="0 6 0 0 0 0 0 0 360 181 0 0 90000000 0 48 -90000000 359000000 1000000 1000000 0"
    $COPYGB2 -g "${grid1p0}" -i0 -x tmpfile_anl pgb2file_anl_1p0

    export grid0p5="0 6 0 0 0 0 0 0 720 361 0 0 90000000 0 48 -90000000 359500000 500000 500000 0"
    $COPYGB2 -g "${grid0p5}" -i0 -x tmpfile_anl pgb2file_anl_0p5

    $WGRIB2 -s pgb2file_anl_1p0  > pgbi2file_anl_1p0
    $WGRIB2 -s pgb2file_anl_0p5  > pgbi2file_anl_0p5
    $WGRIB2 -s tmpfile_anl  > tmpi2file_anl
    $WGRIB2 -s pgb2bfile_anl_0p5 > pgbi2bfile_anl_0p5
    $WGRIB2 -s pgb2bfile_anl_1p0 > pgbi2bfile_anl_1p0
    $WGRIB2 -s tmpfile3_anl > tmpfile3i_anl
    export fhr3=anl
    
    if [ $SENDCOM = YES ]; then
      cp pgb2file_anl_1p0  $COMOUT/${RUN}.${cycle}.pgrb2.1p00.${fhr3}
      cp pgbi2file_anl_1p0 $COMOUT/${RUN}.${cycle}.pgrb2.1p00.${fhr3}.idx
      cp pgb2file_anl_0p5  $COMOUT/${RUN}.${cycle}.pgrb2.0p50.${fhr3}
      cp pgbi2file_anl_0p5 $COMOUT/${RUN}.${cycle}.pgrb2.0p50.${fhr3}.idx
      cp tmpfile_anl       $COMOUT/${RUN}.${cycle}.pgrb2.0p25.${fhr3}
      cp tmpi2file_anl     $COMOUT/${RUN}.${cycle}.pgrb2.0p25.${fhr3}.idx

      ###### convert 0.25/1 deg files back to Grib1 for tracker and verification respectively
      $CNVGRIB -g21 pgb2file_anl_1p0 $COMOUT/${RUN}.${cycle}.pgrbanl
      $CNVGRIB -g21 pgb2file_anl_0p5 $COMOUT/${RUN}.${cycle}.pgrbhanl
      $GRBINDEX $COMOUT/${RUN}.${cycle}.pgrbanl $COMOUT/${RUN}.${cycle}.pgrbianl
      $GRBINDEX $COMOUT/${RUN}.${cycle}.pgrbhanl $COMOUT/${RUN}.${cycle}.pgrhianl

    fi
    if [ $SENDDBN = YES ]; then
      $DBNROOT/bin/dbn_alert MODEL GDAS1_PGA_GB2 $job $COMOUT/${RUN}.${cycle}.pgrb2.1p00.${fhr3} 
      $DBNROOT/bin/dbn_alert MODEL GDAS1_PGA_GB2_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2.1p00.${fhr3}.idx
    fi
############################################SIB part complete for anl file#####################
   fi

   if test $SENDCOM = 'YES'
   then
     export fhr3=anl
     if [ $GRIBVERSION = 'grib1' ]
     then
       MASTERANL=${RUN}.${cycle}.pgrbh${fhr3}
       MASTERANLIDX=${RUN}.${cycle}.pgrbih${fhr3}
     elif [ $GRIBVERSION = 'grib2' ]
     then
       MASTERANL=${RUN}.${cycle}.master.grb2${fhr3}
##########XXW Accord to Boi, fortran index should use *if${fhr}, wgrib index use .idx
       #MASTERANLIDX=${RUN}.${cycle}.master.grb2${fhr3}.idx
       MASTERANLIDX=${RUN}.${cycle}.master.grb2i${fhr3}
     fi
       
     if [ $GRIBVERSION = 'grib1' ]
     then
       $COPYGB -xg4 pgbfile $COMOUT/${MASTERANL}
       $GRBINDEX $COMOUT/${MASTERANL} $COMOUT/${MASTERANLIDX}
       $COPYGB -xg3 pgbfile $COMOUT/${RUN}.${cycle}.pgrbanl
       $GRBINDEX $COMOUT/${RUN}.${cycle}.pgrbanl $COMOUT/${RUN}.${cycle}.pgrbianl
     elif [ $GRIBVERSION = 'grib2' ]
     then
       cp $PGBOUT2  $COMOUT/${MASTERANL}
       $GRB2INDEX $PGBOUT2 $COMOUT/${MASTERANLIDX}
     fi

      if test $SENDDBN = 'YES'
      then
        run=`echo $RUN | tr '[a-z]' '[A-Z]'`
        if [ $GRIBVERSION = 'grib1' ] 
        then
          $DBNROOT/bin/dbn_alert MODEL ${run}_MSC_sfcanl $job $COMOUT/${RUN}.${cycle}.sfcanl
          $DBNROOT/bin/dbn_alert MODEL ${run}_SA $job $COMOUT/${RUN}.t${cyc}z.sanl
          $DBNROOT/bin/dbn_alert MODEL ${run}_PGA $job $COMOUT/${RUN}.t${cyc}z.pgrbanl
          $DBNROOT/bin/dbn_alert MODEL ${run}_PGAI $job $COMOUT/${RUN}.t${cyc}z.pgrbianl
	elif [ $GRIBVERSION = 'grib2' ] 
        then
	  $DBNROOT/bin/dbn_alert MODEL ${run}_MSC_sfcanl $job $COMOUT/${RUN}.${cycle}.sfcanl
          $DBNROOT/bin/dbn_alert MODEL ${run}_SA $job $COMOUT/${RUN}.t${cyc}z.sanl
	fi
      fi

   fi
   rm pgbfile pgifile pgbfile.grib2 tfile prmsl h5wav
fi

SLEEP_LOOP_MAX=`expr $SLEEP_TIME / $SLEEP_INT`

############################################################
# Loop Through the Post Forecast Files 
############################################################

for fhr in $post_times
do
    ###############################
    # Start Looping for the 
    # existence of the restart files
    ###############################
    set -x
    export pgm="postcheck"
    ic=1
    while [ $ic -le $SLEEP_LOOP_MAX ]
    do
       if test -f $restart_file$fhr
       then
          break
       else
          ic=`expr $ic + 1`
          sleep $SLEEP_INT
       fi
       ###############################
       # If we reach this point assume
       # fcst job never reached restart 
       # period and error exit
       ###############################
       if [ $ic -eq $SLEEP_LOOP_MAX ]
       then
          export err=9
          err_chk
       fi
    done
    set -x

    msg="Starting post for fhr=$fhr"
    postmsg "$jlogfile" "$msg"

    ###############################
    # Put restart files into /nwges 
    # for backup to start Model Fcst
    ###############################
    rm -f sigfile sfcfile flxfile
    cp $COMIN/${RUN}.t${cyc}z.sf$fhr sigfile
    cp $COMIN/${RUN}.t${cyc}z.bf$fhr sfcfile

# specify 0.25 degree output
    if [ $IDRT -eq 0 ] ; then
       export D3DINP=
       if [ $LONB -eq 360 ] ; then
         $COPYGB -xg3 $COMIN/${RUN}.t${cyc}z.sfluxgrbf$fhr $DATA/flxfile
       elif [ $LONB -eq 720 ] ; then
         $COPYGB -xg4 $COMIN/${RUN}.t${cyc}z.sfluxgrbf$fhr $DATA/flxfile
       elif [ $LONB -eq 1440 ] ; then
          $COPYGB -g193 -i0 -x $COMIN/${RUN}.t${cyc}z.sfluxgrbf$fhr $DATA/flxfile
       fi
       export FLXINP=$DATA/flxfile
    fi

    if test $fhr -gt 0
    then
       export IGEN=$IGEN_FCST
    else
       export IGEN=$IGEN_ANL
    fi
    
# add new environmental variables for running new ncep post
# Validation date

    export VDATE=`${NDATE} +${fhr} ${PDY}${cyc}`
   
# set to 3 to output lat/lon grid
     
    export OUTTYP=${OUTTYP:-3}

    if [ $GRIBVERSION = 'grib1' ] ; then
      if test $fhr -gt 0
      then
        export IGEN=$IGEN_FCST
      else
        export IGEN=$IGEN_ANL
      fi
      export CTLFILE=$PARMglobal/gfs_cntrl.parm
      export ANOMCATSH=$USHglobal/global_anomcat.sh
    elif [ $GRIBVERSION = 'grib2' ] ; then
      export POSTGRB2TBL=${POSTGRB2TBL:-/nwprod/lib/sorc/g2tmpl/params_grib2_tbl_new}
      export PostFlatFile=$PARMglobal/postxconfig-NT-GFS.txt
      if [ $RUN = gfs ] ; then
        export IGEN=$IGEN_GFS
        if [ $fhr -gt 0 ] ; then export IGEN=$IGEN_FCST ; fi
      else
        export IGEN=$IGEN_GDAS_ANL
        if [ $fhr -gt 0 ] ; then export IGEN=$IGEN_FCST ; fi
      fi
      if [[ $RUN = gfs ]] ; then
        if test $fhr -eq 0
        then
          export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-F00.txt
          export CTLFILE1=$PARMglobal/postcntrl_gfs_f00.xml
          sed <$CTLFILE1 -e "s#${IGEN_FCST}#${IGEN_ANL}#" > ./ctlfile_f00
          export CTLFILE=./ctlfile_f00
        else
          export CTLFILE1=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs.xml}
          export CTLFILE=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs.xml}
        fi
      else
        if test $fhr -eq 0
        then
          export PostFlatFile=$PARMglobal/postxconfig-NT-GFS-F00.txt 
          export CTLFILE1=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs_f00.xml}
          sed <$CTLFILE1 -e "s#${IGEN_FCST}#${IGEN_GDAS_ANL}#" > ./ctlfile_f00
          export CTLFILE=./ctlfile_f00
        else
          export CTLFILE1=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs.xml}
          export CTLFILE=${CTLFILEGFS:-$PARMglobal/postcntrl_gfs.xml}
        fi
      fi
    fi
    
    export SIGINP=sigfile
    export SFCINPUT=sfcfile
    export FLXINP=flxfile
    export FLXIOUT=flxifile
    export PGBOUT=pgbfile
    export PGIOUT=pgifile
    export PGBOUT2=pgbfile.grib2
    export PGIOUT2=pgifile.grib2.idx
    export FILTER=1
    
    $POSTGPSH

    if test $GRIBVERSION = 'grib2'
    then
      mv $PGBOUT $PGBOUT2
###################################ADD SIB part here############# WANG ##############################
      # Chuang: add part of Sib's scripts to generate .25/0.5/1/2.5 Grib2 files
      if test $fhr -eq 0
      then
        unset paramlist
        export paramlist=${paramlist:-$PARMglobal/global_1x1_paramlist_g2.f000}
      else
        unset paramlist
        export paramlist=${paramlist:-$PARMglobal/global_1x1_paramlist_g2}
      fi
      $WGRIB2 $PGBOUT2 | grep -F -f $paramlist | $WGRIB2 -i -grib  tmpfile_$fhr $PGBOUT2
# split of Grib files to run downstream jobs using MPMD
      export count=`$WGRIB2 tmpfile_${fhr} |wc`
      export ncount=`echo $count|cut -c1-3`
      # export tasks_post=$(eval echo \${LSB_DJOB_NUMPROC})
      export nproc=$LSB_DJOB_NUMPROC
      export inv=`expr $ncount / $nproc`
      rm -f $DATA/poescript
      export iproc=1
      export end=0
      while [ $iproc -le $nproc ]
      do
        export start=`expr ${end} + 1`
        export end=`expr ${start} + ${inv} - 1`
        if [[ $end -ge $ncount ]] ;then
          export end=$ncount
        fi
# if final record of each piece is ugrd, add vgrd
# copygb will only interpolate u and v together
        $WGRIB2 -d $end tmpfile_${fhr}|grep -i ugrd
        export rc=$?
        if [[ $rc -eq 0 ]] ; then
          export end=`expr ${end} + 1`
        fi
        if [ $iproc -eq $nproc ]; then
          export end=$ncount
        fi
        $WGRIB2 tmpfile_${fhr} -for ${start}:${end} -grib tmpfile_${fhr}_${iproc}
        echo "${GFSDWNSH:-$USHglobal/gfs_dwn.sh} $fhr $iproc" >> $DATA/poescript
# if at final record and have not reached the final processor then write echo's to poescript for remaining processors
        if [[ $end -eq $ncount ]] ;then
          while [[ $iproc -lt $nproc ]]
          do
            export iproc=`expr $iproc + 1`
            echo "/bin/echo $iproc" >> $DATA/poescript
          done
          break
        fi
        export iproc=`expr $iproc + 1`
      done
      chmod 775 $DATA/poescript
      export MP_PGMMODEL=mpmd
      export MP_CMDFILE=$DATA/poescript
      mpirun.lsf
      export err=$?
      export iproc=1
      while [ $iproc -le $nproc ]
      do
#        cat pgbf${fhr}_${iproc} >> $DATA/pgbf${fhr}
        cat pgb2file_${fhr}_${iproc}_1p0 >> pgb2file_${fhr}_1p0
        cat pgb2file_${fhr}_${iproc}_0p5 >> pgb2file_${fhr}_0p5
        cat pgbfile_${fhr}_${iproc}_0p5 >> pgbfile_${fhr}_0p5
        cat pgbfile_${fhr}_${iproc}_1p0 >> pgbfile_${fhr}_1p0
        $GRBINDEX pgbfile_${fhr}_1p0 pgbifile_${fhr}_1p0
        $GRBINDEX pgbfile_${fhr}_0p5 pgbifile_${fhr}_0p5
        export iproc=`expr $iproc + 1`
      done

      $WGRIB2 -s pgb2file_${fhr}_1p0  > pgbi2file_${fhr}_1p0
      $WGRIB2 -s pgb2file_${fhr}_0p5  > pgbi2file_${fhr}_0p5
      $WGRIB2 -s tmpfile_${fhr}  > tmpi2file_${fhr}
      export fhr3=$fhr
      if test $fhr3 -lt 100
      then
        export fhr3="0$fhr3"
      fi
      if [ $SENDCOM = YES ]; then
        cp pgb2file_${fhr}_1p0  $COMOUT/${RUN}.${cycle}.pgrb2.1p00.f${fhr3}
        cp pgbi2file_${fhr}_1p0 $COMOUT/${RUN}.${cycle}.pgrb2.1p00.f${fhr3}.idx
        cp pgb2file_${fhr}_0p5  $COMOUT/${RUN}.${cycle}.pgrb2.0p50.f${fhr3}
        cp pgbi2file_${fhr}_0p5 $COMOUT/${RUN}.${cycle}.pgrb2.0p50.f${fhr3}.idx
        cp tmpfile_${fhr}       $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}
        cp tmpi2file_${fhr}     $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}.idx
#        cp $DATA/pgbq${fhr} $COMOUT/${RUN}.${cycle}.pgrbq${fhr}
        cp pgbfile_${fhr}_1p0 $COMOUT/${RUN}.${cycle}.pgrbf${fhr}
        cp pgbfile_${fhr}_0p5 $COMOUT/${RUN}.${cycle}.pgrbh${fhr}
        cp pgbifile_${fhr}_1p0 $COMOUT/${RUN}.${cycle}.pgrbif${fhr}
        cp pgbifile_${fhr}_0p5 $COMOUT/${RUN}.${cycle}.pgrbih${fhr}
      fi
    fi
    
    if [ $SENDDBN = YES ]; then
      run=`echo $RUN | tr '[a-z]' '[A-Z]'`
      $DBNROOT/bin/dbn_alert MODEL ${run}_PGB2_0P25 $job $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}
      $DBNROOT/bin/dbn_alert MODEL ${run}_PGB2_0P25_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2.0p25.f${fhr3}.idx
      $DBNROOT/bin/dbn_alert MODEL ${run}_PGB_GB2 $job $COMOUT/${RUN}.${cycle}.pgrb2.1p00.f${fhr3}
      $DBNROOT/bin/dbn_alert MODEL ${run}_PGB_GB2_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2.1p00.f${fhr3}.idx
#      $DBNROOT/bin/dbn_alert MODEL ${run}_PGB_GB2 $job $COMOUT/${RUN}.${cycle}.pgrb2.0p50.f${fhr3}
#      $DBNROOT/bin/dbn_alert MODEL ${run}_PGB_GB2_WIDX $job $COMOUT/${RUN}.${cycle}.pgrb2.0p50.f${fhr3}.idx
      $DBNROOT/bin/dbn_alert MODEL ${run}_PGB $job $COMOUT/${RUN}.${cycle}.pgrbf${fhr}
      $DBNROOT/bin/dbn_alert MODEL ${run}_PGBI $job $COMOUT/${RUN}.${cycle}.pgrbif${fhr}
    fi
    
    if test $fhr -lt 100
    then
       pad="0"
    else
       pad=""
    fi
    echo "$PDY$cyc$pad$fhr" > $COMOUT/${RUN}.t${cyc}z.${RUN_FLAG}control

# Create the grib index file for the original surface flux file:
    $GRBINDEX $COMIN/${RUN}.t${cyc}z.sfluxgrbf${fhr} flxifile
    export fhr3=$fhr
    if [ $GRIBVERSION = 'grib1' ]
    then
      MASTERFHR=${RUN}.${cycle}.pgrbh${fhr3}
      MASTERFHRIDX=${RUN}.${cycle}.pgrbih${fhr3}
    elif [ $GRIBVERSION = 'grib2' ]
    then
      MASTERFHR=${RUN}.${cycle}.master.grb2f${fhr3}
      MASTERFHRIDX=${RUN}.${cycle}.master.grb2if${fhr3}
    fi
 
    if test $SENDCOM = 'YES'
    then
      if [ $GRIBVERSION = 'grib1' ] ; then
        $COPYGB -xg4 pgbfile $COMOUT/${MASTERFHR}
        $GRBINDEX $COMOUT/${MASTERFHR} $COMOUT/${MASTERFHRIDX}
	mv pgbfile tmpfile
        $COPYGB -xg3 tmpfile pgbfile
        $GRBINDEX pgbfile pgifile
      elif [ $GRIBVERSION = 'grib2' ] ; then
        cp $PGBOUT2 $COMOUT/${MASTERFHR}
        $GRB2INDEX $PGBOUT2 $COMOUT/${MASTERFHRIDX}
      fi 
      if test "$SAVEGES" = "YES" -a $fhr -le 15 -a `expr $fhr % 3` -eq 0
      then
        cp $COMOUT/${RUN}.t${cyc}z.sf$fhr $GESdir/${RUN}.${cycle}.sf$fhr
        cp $COMOUT/${RUN}.t${cyc}z.bf$fhr $GESdir/${RUN}.${cycle}.bf$fhr

        msg="Guess files for fcst hour $fhr copied to $GESdir"
        postmsg "$jlogfile" "$msg"
      fi

      $CNVGRIB -g12 -p40 $COMIN/${RUN}.${cycle}.sfluxgrbf${fhr} flxfile.grib2
      $WGRIB2 flxfile.grib2 -s >flxfile.grib2.idx
      cp flxifile $COMOUT/${RUN}.${cycle}.sfluxgrbif${fhr}
      cp flxfile.grib2 $COMOUT/${RUN}.${cycle}.sfluxgrbf${fhr}.grib2
      cp flxfile.grib2.idx $COMOUT/${RUN}.${cycle}.sfluxgrbf${fhr}.grib2.idx

      if test "$SENDDBN" = 'YES' -a  \( "$RUN" = 'gdas1' \) -a `expr $fhr % 3` -eq 0
      then
        $DBNROOT/bin/dbn_alert MODEL ${run}_SF $job $COMOUT/${RUN}.${cycle}.sf$fhr
        $DBNROOT/bin/dbn_alert MODEL ${run}_BF $job $COMOUT/${RUN}.${cycle}.bf$fhr
        $DBNROOT/bin/dbn_alert MODEL ${run}_SGB $job $COMOUT/${RUN}.${cycle}.sfluxgrbf$fhr
        $DBNROOT/bin/dbn_alert MODEL ${run}_SGBI $job $COMOUT/${RUN}.${cycle}.sfluxgrbif$fhr
        $DBNROOT/bin/dbn_alert MODEL ${run}_SGB_GB2 $job $COMOUT/${RUN}.${cycle}.sfluxgrbf${fhr}.grib2
        $DBNROOT/bin/dbn_alert MODEL ${run}_SGB_GB2_WIDX $job $COMOUT/${RUN}.${cycle}.sfluxgrbf${fhr}.grib2.idx
      fi
    fi 

    rm pgbfile pgifile pgbfile.grib2 flxfile flxifile flxfile.grib2 flxfile.grib2.idx tfile prmsl h5wav
done 

cat $pgmout

########################################################

msg='ENDED NORMALLY.'
postmsg "$jlogfile" "$msg"

################## END OF SCRIPT #######################
